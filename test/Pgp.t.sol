// OpenPGP Implementation in Solidity
// Copyright (C) 2023 Sam Wilson
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// SPDX-License-Identifier: AGPL-3.0-or-later

pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/Pgp.sol";

bytes constant SECP256K1 =
    hex"984f04645ac76d13052b8104000a020304a45fff31ce17d794419cf9996a25d5bd0d11592844a508725d1839af76874cab79195af8b00b92427ff3aab326ff7c5ee6f48f20a490db56abb5feead821fdc1b43d466f6f20426172203c30783030443342416631303830623143666235383937323235613231456364634332356131463434353640657468657265756d3e889604131308003e162104f5d6432b0c895de229a70b6746888275248b5d7a0502645ac76d021b03050900015180050b0908070206150a09080b020416020301021e01021780000a091046888275248b5d7a7b3800fe2dcf3f3f639edf8ad95b8bf83df5c335a818a213f0695700c9d9b7fe3b9ae2fd00ff5d20b7465477b9a3450286733f567f7607d3ab27f5d1858ca2820c3f64960fa1b85304645ac76d12052b8104000a020304470c95b94644da2267cc7966a095661ed4fe169fb3fe0165ff440b8a5d43a7d64554a64147683c12d116c2ddfe33c3f8cda8f8f0e5c80bceb1e544d6944cf13803010807887e041813080026162104f5d6432b0c895de229a70b6746888275248b5d7a0502645ac76d021b0c050900015180000a091046888275248b5d7ae42f01008f1140acfbbd636fedba264b9869aebd3335fe180b4d07b1413c9fc372801baf01009fed58af68af2b1293476a2ae1b84c469193312f4db2d358e0bb889b77203783";

bytes constant TOR =
    hex"c6c14d04548eafba011000d032cf90e5c02c851863dd890a80204acab8c558c66a56195ff58dde3ed150f641449d82121bdaf3321142e8a3173e7f5b820e8e04f3d49e7276f54b0abc093ea9af05df947eb3465798f45f9afe7fe8fab12ce9f81bbdf72baecad3f797616d664e4cfdb2363cbbd1374f5d09353d3313feb45a286e64629940322aaa28347ceb1dbdd19a83eb2b016f754f9ea4013fb2e7d55cbea54240d8d2f3dec4dd3f61b1436440d09d3a2b5072737cff954d4142f44a3c83055d32e6bcbea54b75ae7a238fcd8a4375b366e0fe5ec0c4fb0d89486aa172a7fd6fb0faa6ecb5b26842370649f4bd65a4996b09aa7a61037c4cf15391fe1a14172dc689c07500c3c5b38deac3c900b73f9b23f04d54f10f79c9261bf5db27edda2c192da08971dabab69f7aaded5dc1a113a6fbca796aa158656498d6803e14a17022a95580b7f898a5ea74ea37a2c884a0f420b046393ff6fd1c5de248f5b83cef7364551dee8b28b73911060ef34ff04882fc2cc76a6525f647f02785c3601bf93bc8e41658d63b44f535715f84f5028dc2a4b8663d95c94eacea291a3ee5278d6e7d88c912194b92fa02544768698ce2a3373bbcbf16e8b41819d35ba90d4765ebd3a747576ff57f9b3331965323a30232ba48ff2b16d5850635a059c103387bb9d58a6271274ddee7fb969a445c6c7dd67e39c553212fd77628da770e15a4283b9685d962582febd70011010001cd40546f722042726f7773657220446576656c6f7065727320287369676e696e67206b657929203c746f7262726f7773657240746f7270726f6a6563742e6f72673ec2c1940413010a003e021b01050b0908070305150a09080b051602030100021e01021780162104ef6e286dda85ea2a4ba7de684e2c6e879329829005025f17a9a0050913eefb66000a09104e2c6e879329829012110fff7e21a3b6ec05fb1001e77eba7b47224d72932aad9aaf6b8181e2a7025ee1f3ad9e3cb13c33020dd9deedd5e181772af507e08ae97464787b518cde5f78e2ce290632e9490f7d26599d2b7fa57a87f5b09958895e8e91651da34050614c6e6b47cc96f8644b68dc1d3f1c6000c7fd718873f91aca5d123f7d1f64fbd746b1cf9982a9bb7a051bf8b706421164382c4d461a7d4da0169fd124e617b96e282dc8422fc7d9549cd8b4c92d0a28e4b9e6affc3e8d9e0df52fc940a7de610997a656c75ad1be01087d5710c9c5f2bccfce73c2fa2c4742ee5296ef9fd26c9fcb05c01d9303d8cbccf36bb6b05ea2dc7991c426d5a7be11388d41db49f09cc51e6e5ae54995899cbaff3c8ad13e0f8ac2aeec9d74999f5b041ae8457baa9b15aa9c3e0657f927284084ecad8351e4bb1ec2629ff85573639a1dc9082358b609e77ae2d55f3fd2351ff4171d778fe005647839f03d354307fd51dd108182eaa6d1f92a1815bd1cd4d0cfc8eeea188d76d4ed2c1150f2b61a30ef146157d0045b6e87bccac234a7b7482c37727f1447073080eda399a47ab2f71ab12705979757c335e0174138a8b0dacc0a89b56e5e1996f2759d28eedebcaf0efb113b5bac04f9f5828215b754b33cb67565a4c9264d3c500136d9ef81617e8af60d3f0e6e7f03f882bb573bf63496ed5fd8f54bc6f3f6dd090ae2881d10a517b8a327437240433ac5b2c2c1940413010a0027021b01050b0908070305150a09080b051602030100021e01021780050255dda24505090ab4f403002109104e2c6e8793298290162104ef6e286dda85ea2a4ba7de684e2c6e879329829001131000b438720b6a9402fdb54a1f36ada4fcca966945ffb001a2a5928fa472af4815206e68703ec1eba970fc0712b6fe9cef702928e3c707811eb496e98d665d9887bda3dcff1acd57e63710307e35cbf1083eeb60d183bc3e8c4a4532692ea15ee120ddeb842c5d3a7060ead3fb57756fc70458ac483b539abe240cc7f1ad26a0bdfc4e532b25c900d0eb21e8a49da799538b09d0318bf58e63001b3224a3a8f9235d05431128a4f95367e316af661978e4d9d36dc68ee740e9ff994e744c0d5fc830557159d0d5b2116206bcc8e590723128c9f9d78806d15b637ea6bd0c45606f6efdf67c4646239cba5a876dd3daa07f99674e1f3b7ceef52a700dea6a337a1e4743083362e538e23aae9e3dc9d6f4658ff655b00c1f9a70ee55ae91507787ee2c8b561460a5e11e0fcc0b8729b6b312f135451395b874ddd7e069b44610916e0d1e67594e1c92e1b4b004d994f08622efa24fdf4d84e09241796c1b1c0ea29564c4322686229e2e26661785d0e713352a83bd9e7891cfc3d69681bde3419dc0124405909945a789459d3a4770559493cc9e5258ccd2e575a0bbaf6b1ffc579f0338c48df7e0d505d9dbe89a4b96e21dda81fd058eef31d63f7f611d032b093df3ff37d3e0d2c59427bccd7e21c0416ea19d666e081a49b9582f914796fc7beff4c526360b46be27ac70cb59514d8a15119e53800f124f028ea24de53faa4b2ccac2c18e0413010a00210502548eafba021b01050b0908070305150a09080b051602030100021e01021780002109104e2c6e8793298290162104ef6e286dda85ea2a4ba7de684e2c6e8793298290b0150ffe33dbac71c6a351b79dd3fe31aca87ef7753cd3fdabdf794b3345a87804dd358752ddd0e0cd1f48c57f8b2399dd0582973c6fb3ae0b7169fd0d84493fbf69b4738ba69098038c67f12c0c76998c18442aca239da2b232bec02657c37a0495c4a338b34409bd59b2a6741f2a92971bdd970e1fd2fb72bf665db68ccc59dfcab3e93d800724dc685e3cbcc4957f4c57d06871bb98d4463c115f47b3cdbf52c0915475e3c4b1db52bd9b8ca29288c74cfa49e51d107bfccb8f822073896aa5536368bd39b3cb83cb87b8917cce327959885ed541e230c49b1ac6211a8304117a6017413d8d13008ec304f5d642ddc814f432d98b9a84b5810887ec510b9755dbf2fb96e48fc7068ff7482ea13942152df81236da9c9c4e09f433dfcecf755250d25a542077eebb09137e3902ee264680e3a87c90df59ce3571c36dc421207c3aae0f884b4eced93e80648a1c49947ee4c043e8076342a299658a85a001ef0cbec34ed04db02477b7bc7e4cce7b2629949f9fc4e85bc04d6a81b53f9709925fad8ceaa2910daf5aed52df1b2b72e5b6823228c174488bc5df92e584dafb03f42226bdacd2abfa7034e6b8f43ff2f0f6d498f7994d7fdb221ea1c758fa567b39146b1e02d381a8bf29097eb60c1f61003a0f3bc0e41e5136011a9d3b25d7427761e152cbad37f5fa08c5311983da15c01d66be47cf44d955533ca1660f37feae06c7a9cec14d0457bd8460011000ab599f14c1cc5638e07dbec70997414feabddb213ab7cc8b7270f146cea68c9902cffa4609e5e54ba7caec92e9742249a07315aa19e7a4ee1059d5beef6630fc0aad54a546cb407875ccf759dde4fdd6ea233b67de26678891373f7c7b9a41f3ac3b82df914fd88d2c886d759f7bc55445c35422dfa705a3cd1da17109bf53de4bee511bb4b98a31caee5f60cd659fd327ac53cb8d85879ed7814f8e3c828dfffef3ebbea364e233549562217f8fd206317ec5696a389f8dcd1d3e0e609c7c0611ecc3e34331f94af8a51818b294a412ecdf258d967358093d120f373475d0f041874bb006c2964cd57b03df355d3a6c88a0ee1b929bb247948618b3878629770c44e67148cd917306c5ffe4c2ef69f9b2ceadd68feaafee8be0a3d72c9c8c9c8056ce72c3890fbf71f38b878d461766df5fe16da2a2da64ab05c8fedf678a384437d6dbcac1102ae0790e9c7d2c27e7f383b94cf3dec7aee71ef98f25f956f0cc2438dd48d404cb6f0836d3b65e18c5172c78c18098e7f445e5b5a7bfa39185505ea007400532f44e975ee0b30bf8e3b46baa8fd8a7ef57c6bf73b14f33d9916af1bc08680e8ad066232694a63183d3d2a062a9fff7bef1a4d6f7f984b86a09c8586369e1f331cd08960647aa5db184172d12f60997c75dadc665de4eecb1798c549bdb02a089b9467c6816887186ae65b4dc01d7f01ccbf467e8c34a6b11d30011010001c2c39b0418010a000f050257bd8460021b02050903c26700024009104e2c6e8793298290c15d200419010a0006050257bd8460000a0910d1483fa6c3c07136fab90fff51ccc4655173b0d4b1201cdf0fb6a01de5117be67d8931f5427a403f5e1d8d156b6235ed4f399620f74b99009139beb47cd78fb50abb9a1d41ee1092f16e67638dd9635d4147dfb64be2e3cf81be97ca7874296c5bb7e03812991022e83551d47ce85c5b7eb6ed07e2a9358b5bf6ddae1419f828c0006496f33eb7b7dcbafc8436a6f231a133df8b7ecdab92f5b54ae3533584f07a1ce9b1d7376e39b453a94b5a690d80aa9b40bd5d9db7423b27dd1027bed1d3e293e704deb069fde395b747e086f8ab344323892f210782836699d82225c6ad62851febe654f451e7fe47db0ea557da8f9bf4b82450676afa63569f09f0b2e9795d0782c0c32c7bc9ab44f7984f831a2c714506dc5e42e5415ccf5c12b1e0fc751d0af8a3fb800b98e8aa86518e6240df197cbc6214af3d965de3abdaa2c5f87b0776dfa7eb25d1a781dc8abef5635e6cdd3a5157e783435d3e895b923e4956e627f7134b3e0d99751f61b4e77e22c780cfc9e6ff209d2990e0f78500b068b9befe5295dddc9e34167bf6dd6a4a65b441f8823751a145f2e7482b8c7f892701632e36304032123caff07c180605f3a8c3755c89bb0c945fa9c22d8bb1ef1aa5f85a0fe172ac6fc5105b0fb9fd246a460fb00e3782aaae4c48160b081ff022e78ab1dec27425dc0f1bdaf3deace5acf164380eb9c21adbb7537577ce24b01201e0d45a4e97903d9e1d44176f162104ef6e286dda85ea2a4ba7de684e2c6e8793298290fc1d1000c6e1e79c88ea0af4dfccaa7fac0227893d2e0e905c70063caa8426f5f18743333a18d6e2e9f067501a10952891ad100996978316949e7401db53218818cfa460f17c783ecf282de3d989d4f27ab352c95f08da8e231ab4a6d362d35ef7cf9346bab86592841bcc41f7e061a55cebddfd755f9ce79dfa97032d688d7bf8e5cf0d92cc1db5a0106ef610a6466f80dd8a7159d5905a06022a522d9c45bc011ec83938f2d51d50f5f84ebe6ef2a03aff1e9de744532d8bf66a110f5929fad7fd6ff940f9fffb54e159df630d31f6613b235bf94cd5d3c15418f5ec1a69d614da194d61596e882c26a917329d7dc0421ba3a96361f6847ae4b0827524095ac11ebaf4bb41497cd084653f20f5de50038b26f84a9e7aca102431f32dec01e521fd9dfaaa61f41d9db47d566774ae5723994aa2666b9579c535cddf177287af1f2194faeb212106f6a4495b6e163a71cba35195c0fa68c2ba04f65fd824ee7cdea2d1bcdc30be7b4625dcd5226f576e21a7113cbd3f71d62dfbd0a6f11e240b18e64d914da4deda929e880dfaeeeb9800c19cb60df82e781b81362379c29f41b56e1740cd62fe2192db8feb73838756bb25f41cb45b01d446220adcb1d1520688bc30cff541cd2ff08240624d028c682257126c071b68990a577208a865ed0f8c2b8cbc912be5b100143032a70af69d1b3a764a199683aef254daf594db429e035badd8cec14d045b09d074011000af0c454c63b2fbd9146b77752727236d1cbe52f82ccdd179eb1e76aac510e7193fcab9915c62bb79f5cd3eb80574736b612260fb6dca66e1e7aca72e4fd2c7170cd6a746867d6ac1d0846affff4d824ae1e1346513db74e2fa618f6191f04f65438d043f98627a21b0e52701844d691b128e5030b1aa036ae24c48e1a5ec56a6d04d860efcc061e0848c4f52605c16d631869af10a8c057dcea8de3301f403b35662e4e8f555e60b2c513cf8402b0ff75ec32e27558e9cbf6b3f3e32a366509722dfdf8d8814aa6f40bc3e1f736a458a496bc3f96e2d5c2981873fded46451cb3aee6bcefa321664d4f361f4a1cd8140321a719cf0995570c8cd303a0e1ebdd4579afff62afb6ec31a2c179f245d94ed090ee689645650f18c5f83d1ef523bd0a0410dc2d664ca6d996f04cbea04ec38ce50cbfbeec19e059745fe9056d0ecb8aa0345fed5fffcd92823674a041b8440c8a440b81fb84a0617fe73b9e58974b8c40c449e641f675e05846800f0887fa7cdcb94622bc2611db2b33469453bf61b0714a186d3d426fc2f7432efbc6adb50623b1b39396ca57d44b4c8b64df5738ffeac1ae4c0cf9a94b5900c3721c05ff4c03cdb93c5c57418fe6bfdaef7798268a9faf7f0053f05dd9bd7cd01c05811746d74ce366a7f0b1ba38c4d4f909050fa63a0e71ff0c98115c3e1e47d98122307d514527e31790a61e5d7547839fa5b9b0011010001c2c3b20418010a0026021b02162104ef6e286dda85ea2a4ba7de684e2c6e8793298290050260bf6cac050906ca7738024009104e2c6e8793298290c174200419010a001d162104110775b5d101fb36bc6c911beb774491d9ff06e205025b09d074000a0910eb774491d9ff06e2d7bd0fff446f834b8176b1ec9ca3a37eac0f67a9382355b0c76b6992bb1be30295571a114d914e885d43137de06750e47f58dccdfc1da416506c2ef482468bcf65a96db051b60e9121940ee77a6c33ec266113b50b83fe072309f5b7fc576f29cca4ec055de3537002a76b8d59fb7bc08cd4abfe801c77fa46056f8a48250be45c5312db387757ccba6033c22dce8b43dd406afa0ebbba6dd51b51c2dffd51680fadaafae0fee7a11238620bbe775d8833d95907951555a0cef82a85c2dc72b10a1c00ae94f99407eac14c2f72fbce88f2f866c062be5e39dad40e3df79ff5706057b2d24274b55b2f31d0bfa770294ff0e884742dc3a594a064a78527557ec6c8acf55d01cecfcfbf8547faceeca6f9b5025ec1c24357424c67d9cb1ac2cd6522e4bb71f07ab1b76434d1b101e41239f08b382589534d678b2fcd5514221048db84248c1f08f50047fa07eb068219a3e4111f09d7c1dbba38782aefff140226b8bb834165605ca99dac5cfe51e88cd41964200703702ffd109c6c4a01435241751d9ff68510f3a649b4755b50a538937f63480fdbf1ea9241007acbfd9d90d756d959d788cfc08bc6a3d452504d7e0afa3e69086cbff80476e35a9f7889abdc9b4c6afd92ae47ee0fbd9d50f6caa3015e2aadccd29dfdd76a5ea07f363d59cb82c0fbba145361b84b50e79f606f09be8a2f9e1407e97f51bcc110dda672bd17e090dc91f0ca0ffe27cfd7175dcf8aae4f95cdcab83ccf5af05550e88068a0166d88ba69c687f505341fdd2f42655d5e2d99835e2da2b2ffb61298d30fd4c9cc591f856d8f15585ade159a9631cb24e0068df9f417ccc1498d9f616d2c8148ea4bd53676d279c8c34027b7c72e1f62d214f267944f8a65fce778dea7d68f56a3496f170b303f16291c93a4ac3c8331e2eb9037fafca7e32aae50ba39552697ce3988083575039ef393a2d1db3a9a9150b53a7a568a1896dd441c81d9c37495b3c98dc3b1e865ec50da8018ed15712ec2567e8a072c48d0c14f6f098af2c67f3148896679d4b81f71dd7f917f650f45d3b2225dff8dcfecf0001072f5a6edfbb17023a0a8ae813cfe12eeda62b9869e238e0c856d87ea77703b8f4a23b8daa087f4564d9cd8e0b232c19fe46ddd8dc0e767bd2110441dafeda1db268e3e4af98f7a00c6e800de9446d2b9d7ed23e8977c67b1a8646dec56565b56200fd947a4686696034f69c0878bdf4f30c609eed278d33386e661bcfbc94bad972d0733e330816f3f4b660b6a9d1c696988c2c98ed14179e0547cf2f7c22688d99d81fc70d450fea96d85c82e5c3767e02d4f17f21a6a97dfcfebc7ae00803b53ac3b7d58e2dc5dd4ba5d05baa1115faa7d64e6dfa2dd8bb0564852862a51e98db7682a1eecca299c888ede90ddd031e40530644dbb29959fa5f35bc30fc768db533ea0fa50bb6f45d4225e1795c2c3b20418010a0026021b02162104ef6e286dda85ea2a4ba7de684e2c6e879329829005025fd6cf6b050905ba4cf7024009104e2c6e8793298290c174200419010a001d162104110775b5d101fb36bc6c911beb774491d9ff06e205025b09d074000a0910eb774491d9ff06e2d7bd0fff446f834b8176b1ec9ca3a37eac0f67a9382355b0c76b6992bb1be30295571a114d914e885d43137de06750e47f58dccdfc1da416506c2ef482468bcf65a96db051b60e9121940ee77a6c33ec266113b50b83fe072309f5b7fc576f29cca4ec055de3537002a76b8d59fb7bc08cd4abfe801c77fa46056f8a48250be45c5312db387757ccba6033c22dce8b43dd406afa0ebbba6dd51b51c2dffd51680fadaafae0fee7a11238620bbe775d8833d95907951555a0cef82a85c2dc72b10a1c00ae94f99407eac14c2f72fbce88f2f866c062be5e39dad40e3df79ff5706057b2d24274b55b2f31d0bfa770294ff0e884742dc3a594a064a78527557ec6c8acf55d01cecfcfbf8547faceeca6f9b5025ec1c24357424c67d9cb1ac2cd6522e4bb71f07ab1b76434d1b101e41239f08b382589534d678b2fcd5514221048db84248c1f08f50047fa07eb068219a3e4111f09d7c1dbba38782aefff140226b8bb834165605ca99dac5cfe51e88cd41964200703702ffd109c6c4a01435241751d9ff68510f3a649b4755b50a538937f63480fdbf1ea9241007acbfd9d90d756d959d788cfc08bc6a3d452504d7e0afa3e69086cbff80476e35a9f7889abdc9b4c6afd92ae47ee0fbd9d50f6caa3015e2aadccd29dfdd76a5ea07f363d59cb82c0fbba145361b84b50e79f606f09be8a2f9e1407e97f51bcc110dda672bd17e090dc91c81b0ffa02d9dfe697edfffdcc4e0d8a0beda99acf48bd5eb2bfa1d411d95554c519f8630148ee86f47ebf40ed18bf9ac8b55f21500cfcc3842de8f8ea1b4b14d0bed69c157af3ceb71c6f7e974d212d65caf0a20f4bcd20c3c432de2c6687ba19a4c0d6d44c055c98f82e4f8e60543ab14f0df14020472dd4ea020ea783b320c5851ea135b3b3d615e3fabe73e038da02a17c232ac67409c2ee22c28dd8e09224112efa856d7391de76310e46672d429962622ca73ea302f6d7242fc7f0e6f4b0532c38ae3e9affe5821794d9aa1ce9f2b2b71c57de5dfb312c6e04ff10f07a8f27ab91d8592996372ee0eea0977df52a07fe2e7176833c3f80273eb1521a5622bc4608e401ab07ae243d116a15744d0f0f6c731337abd311b991ac843a71b6ae43dbc44f220d9d684bf9f73f71f96b29571a24368aeee03da6f5bb3ec8f690b29cc53a2ef1db6afee9a6d64f9f32601fd6cf1f705b84ca26b1f530b66062ad3038faedd214ec4e120f7d171dfc7b21bf28b52fb0626773d0658850a5ea814e2d175861f64ab5deb5e91be32a5262b99f042deec6b3b7bc514df1ee94690be383b5bec96edb177365a9eefea689a02ed21e78f85b1f1b73096f41e08cb84253871a9c252068f0f892f698b99883745716f681fdb381465dace52761b196f295291f3294afae5a60a1ed04f7df15f91ea96776f2f580ab4a4f61e45745b255159c083857c2c3b20418010a0026021b02162104ef6e286dda85ea2a4ba7de684e2c6e879329829005025f17a9f1050904d39a7d024009104e2c6e8793298290c174200419010a001d162104110775b5d101fb36bc6c911beb774491d9ff06e205025b09d074000a0910eb774491d9ff06e2d7bd0fff446f834b8176b1ec9ca3a37eac0f67a9382355b0c76b6992bb1be30295571a114d914e885d43137de06750e47f58dccdfc1da416506c2ef482468bcf65a96db051b60e9121940ee77a6c33ec266113b50b83fe072309f5b7fc576f29cca4ec055de3537002a76b8d59fb7bc08cd4abfe801c77fa46056f8a48250be45c5312db387757ccba6033c22dce8b43dd406afa0ebbba6dd51b51c2dffd51680fadaafae0fee7a11238620bbe775d8833d95907951555a0cef82a85c2dc72b10a1c00ae94f99407eac14c2f72fbce88f2f866c062be5e39dad40e3df79ff5706057b2d24274b55b2f31d0bfa770294ff0e884742dc3a594a064a78527557ec6c8acf55d01cecfcfbf8547faceeca6f9b5025ec1c24357424c67d9cb1ac2cd6522e4bb71f07ab1b76434d1b101e41239f08b382589534d678b2fcd5514221048db84248c1f08f50047fa07eb068219a3e4111f09d7c1dbba38782aefff140226b8bb834165605ca99dac5cfe51e88cd41964200703702ffd109c6c4a01435241751d9ff68510f3a649b4755b50a538937f63480fdbf1ea9241007acbfd9d90d756d959d788cfc08bc6a3d452504d7e0afa3e69086cbff80476e35a9f7889abdc9b4c6afd92ae47ee0fbd9d50f6caa3015e2aadccd29dfdd76a5ea07f363d59cb82c0fbba145361b84b50e79f606f09be8a2f9e1407e97f51bcc110dda672bd17e090dc915c160ff9010fd3d5c5615323734dd5c810cb70104fa941dc3d8a17fc9fed7eaf5fd08ca5c04d703cd03c3e86c78bdf5e2aa4226a1c64799814ba36834c3386a6c14a2c2145c97bc43f006fe62baf0eb3515cb870217345769bf3ea08e8ea42364a7f1c4c77d7d706c6c8df46beda08f7a6a098bb6fea38262c2f63ec77fe80f33f561c9b6cbd8c0853c6ef40749319c4c841718fae1ee641ca64b47308e97e7e2c13b1a117f4bf73ef83adc7cb973b38756472ad0a93e4e0dfd77eaf7d5e0ce65d5bd4687e850d289a768e8637e5b4f3309cccf4e58411c5a554505d26dec70fe64a0abd13e1698a1a8b3a6ad0740cb66fa433dfa5fc1151f2d8d6cd25bae333dc332f17317e37fc69e17dc92ebf08301d1e23d140a34bafe6ed142013dd767d4d8042c13ed83ddb8ad695ec2ef8f8c5b4be6ce67aed85d33455172cb3cd7a1727c080f8bdba60eb26e6d554fafa2dcccfb7a6ea360482d65ed1c3bc4bd023c4b1e7b1321b6a4f257c652d8ee025de3d26a518dcdf8b432cd882ece98c4d2e252540f29de9412fc517e6a1e647fd2aef43e58e819271644fcf7db4d22fdfe3a89d5089c43f0d85fc0d633c7f8480e9d50978c58a6e2c5c8d36877bd83dc7352a8148a406c413dbc9ffb44ea02f15eb998890100ac7ff382d7f3d8f2f66581231eeb1d4512d6dcdd30b9bfc2d553f13026df172224ec6aea539d7e8b318539e6d6fe52544c2c3b20418010a0026162104ef6e286dda85ea2a4ba7de684e2c6e879329829005025b09d074021b02050904536c00024009104e2c6e8793298290c174200419010a001d162104110775b5d101fb36bc6c911beb774491d9ff06e205025b09d074000a0910eb774491d9ff06e2d7bd0fff446f834b8176b1ec9ca3a37eac0f67a9382355b0c76b6992bb1be30295571a114d914e885d43137de06750e47f58dccdfc1da416506c2ef482468bcf65a96db051b60e9121940ee77a6c33ec266113b50b83fe072309f5b7fc576f29cca4ec055de3537002a76b8d59fb7bc08cd4abfe801c77fa46056f8a48250be45c5312db387757ccba6033c22dce8b43dd406afa0ebbba6dd51b51c2dffd51680fadaafae0fee7a11238620bbe775d8833d95907951555a0cef82a85c2dc72b10a1c00ae94f99407eac14c2f72fbce88f2f866c062be5e39dad40e3df79ff5706057b2d24274b55b2f31d0bfa770294ff0e884742dc3a594a064a78527557ec6c8acf55d01cecfcfbf8547faceeca6f9b5025ec1c24357424c67d9cb1ac2cd6522e4bb71f07ab1b76434d1b101e41239f08b382589534d678b2fcd5514221048db84248c1f08f50047fa07eb068219a3e4111f09d7c1dbba38782aefff140226b8bb834165605ca99dac5cfe51e88cd41964200703702ffd109c6c4a01435241751d9ff68510f3a649b4755b50a538937f63480fdbf1ea9241007acbfd9d90d756d959d788cfc08bc6a3d452504d7e0afa3e69086cbff80476e35a9f7889abdc9b4c6afd92ae47ee0fbd9d50f6caa3015e2aadccd29dfdd76a5ea07f363d59cb82c0fbba145361b84b50e79f606f09be8a2f9e1407e97f51bcc110dda672bd17e090dc9181f30fff475a152d7444161ca84b7c5646e460542b170c25ded33d9b5fabd19b15fa47779ba8d4c63f590c7d2e3f1ed884eed4d27bed48b581ae2bf494ea8c914a9974d5920a464c3a5e93256d214e418216bf3264fdf27138213ff84f1498ff01134326d4287655965df6704520d9228d83c3b208443601bcbc69d7b1673241482c7a0ad8269937907e9c4f19f754759eb27dd9b5cdc162076f7774b7ed354d710174e93b90735b69b070c3f6c8760e83e2a8ff2cbe05f87da247fe813290348167697080841264274247f481f1ca9f794066ca97d45b3ebd4c0f4825dd95652450fb88328a5e9d4f0f4ccd1fe6301391b61455c7cbe39b72aa784fa15dc3cd3f80fb52ad477bc6915c47193ac27aeb05980ce40d2593b9686ff0b40dcc0aed49a9b7f5c2a2ad97c83c71c9aef2fcd377d9e34f01e2dbb9e8d499693fc7a8c17ec1581e81ee009865a746568eb6e5f02c82a6a6df282a85330a0e8991700063302bb75ba7a116a66c1d4f36e6c5c846469437805ad5950f8191167013e94a5388125e867531404353d4ad8b5a78845e851b34bb65a3e1f20475233d28c2e2022318b43adfe71ddabf219204f7878ce47a7cbdd293428099c58a79fa513712a264e1516897266a8e78ad43993a8d59f89e98fc0574a5d2028af9045ecf4b7b31442cac7fd252f33ddbf1718def1446adab5a3f61160c3f6a68c16f301a0e022929ee7db9cec14d04614481bc011000bc6e42a12588c38c1a9a155d62bbb883c75e657c53f914b80b5d6b731fa3bbf2497520aafdc28226bea6ccc85dae41631dc6082c765be1fe118cf207cd0dc3f433da4017d37fb027f81a8a841f4643447198bc72f592d3ca714d5a4a91a3cc46e8529347825c05e68a40ce52fcf1a9e07b53f20f05db19249a10939bdf3895f5bc0d19bdd1f05beb990baf6b25cb40a99faa684b4e3bde22f68f8c7d4abea2f1cf7e560ce68dbbc3ca02f4b2a64c955aeaf320f3c74b4642699d71ded17afc5eaeac7896487e2c6ed51bc503938bbf126f13248ac08d8727e167e7a0273d929beb8600ebb3cb7bf8fedb4d70facbc687bd4515b8f1cabc4e4c60dd799f4030727a211bdd86d82f87a67171e587292a83c64668e4181f2a690a63d57e3cd9a96bf87b8c403ee77d4bebb8f5a340757609a7bc7a1b8a2c53893308eed3d302cf5fb17836456b3e2fe9cf54740b4c7a8e31146c0f4b2ffd6d9c0abc9d34ddf0eded456efd4a6b9e4002ed6eb253be5c97a191ba9be46a2368018ce03a308a7b60c9f1183f804a976f7d943e7fc387b536c3bca3bc6453da2cc33353e7b8e87256b43f78c555276f83be7e1fda949e9e769340593b8ca740bade694a54c5ac781fd2f7f221390a5817e6f27ee1f084caac888405448451a98c327e4c6d4407696313b3e308a520f8e2be5dfe3617906b6668e2d5fa40b0a88e852c07b3b963f207150011010001c2c3b20418010a0026162104ef6e286dda85ea2a4ba7de684e2c6e87932982900502614481bc021b02050903c26700024009104e2c6e8793298290c174200419010a001d162104613188fc5be2176e3ed54901e53d989a9e2d47bf0502614481bc000a0910e53d989a9e2d47bfbca10fff6f800ff640a904114866ef921d1320c8cb901a52e65c95035ac7b533b38409ad0a7a22d31d0377ac3c77cd728cdbaf7c68628ddc4f3a3522700fbdb4458729bdc0b3357c24bef6bc2d8e265dd0a1df82f4de79f74eebf842f8d40e04c3b6cb633e4389f401a15b7fab34e350865da4d6f3fe80c7afbe51ddb9bc43029256b8f49a26bf975ac208b05500501a179f55212fca8f2468e703ea51a524c54e40d4c1ff1577115daba43b8a27b4da9a66957e3f573df9db909c0235757103a48802c9afb89090dacc128b9f71ed3d87fbe7ca8d8f4a80325f99df37863e6745c79748579210c318d0a299e31e0eab0532ea18642f0fd38ba425ec0ab6a1105d015eb5511d504be7226287e5ced76788a0c5ff3e70d349ddd2a1d3b45b73dfa7a307331e904a8c7caf9389762f96aeb4b0641060dd440bf36f9205d24c0e1c45badc8643aae35add4474e39f38b947f7b765db3e230a6b2d5c073ba4f0bb5cd385cf7cd96c99a3055fbe031f53d01879ccb7efbf31f1b348f4e709504e25496419462c079c328b1d5b37f527ac6a6906367ce9ffa6c175d748962d0321aec8885dc8de52b15a835ec3095b81e6fea51f1629732f4a9d8410b3b007ad24076dddb64f0ec8f9bc1db6c28d54b82b83ea86c62b5b5bf91cfed335ecd007715ad7a213ff354c7741b27a225775e048ee1525a553567d4d4ecf988ccff133f28abbb1bfc22a684f10009a157559de1c12dbc399a7cd9c675c9c90858c4234e2558a6ddd06a1c83e2f388b4d7cf370467ab5b6d354bd462a8f817d7152a1dd45b655257398d54d3dcfbb4213c06e38abc528e73eac1f98e129944297dae55a785850a1e93613112ea8257f76ce748bfa4e9e9c59b2879eacd676fa496b057c6c70344531c1bc28ca92256d4a2cd7826b677f1fd57268c0bcdf16388bad307ff2494409398367a3e6ddc9ea5bd0d9501be7a4424bc23b6d243b8d6f47464ea91649829d26caeaab8392f9e318af32ec4dfad9c20ecd375d217cb4c44fb312f7a4526b4cdc3b2c78aab1952f25425625f4530e7e5b50b8c0c1ebafb549e97d53fb1eb689296693dc93b3ab81ec176a276af34aacb1d30fedad738c1ccd5a9181292baf3c0fecd8887b48175910e0ead96dc16eb2eeea29ff15888bd1633de7e2af37396c3235a054e1ba8e176b229a1c8279d85a039a363af2a7fd960c959de283cc610d59e36bacd8432c62c57a8b731cdd780044d0de9036adbf4acbfb1fc50935cc9c04318ece6041f04e59562fb7a7f14f9f71ebe1f4c0bfd65b87967037e371cc4b99b86166d12652172fab8f6ab2f6f0a3872413dca301f7343d07b0c3cfbe21700b0c22f01cfe2641f74de0d99c797aae145e303541445a472302c18c21de781be89fab20031babbd0959cc120f69f0e49c264e0b41e16ce72c8aec98ac1fcbff560a3b3858f3e0cec14d04548eb056011000c1efd62f88316363a9b08c50f4bb0d74e6e091b0d45f3c81fdd81d5c1217b7597d47474b87dbeb97d5b3800f69f299a90ada974aa30c8b08da8660b9e776e3f20317d2486165fe2a4b3959b1c93f793b1a4ebcc0370606718c4a868abce42d73f2f7ffb0079e1c6716fb6c0fc6b276d51f04d201062373017b1fa4ffd67feb4657acfeed4f824fbc04dd40a8b7612b6ff51de4f552abc18c1d947e228e395db0d91070ad99682cde5fb3f338782e715fdc73fe52e0cd9763c29b102a97e597388dcd6c1eb8d0efb8638b08c6dd3c0b7c32ccab861fa908951bd71af63b902f8935f9fca0c1b592729e3bb59fddd0f3b942bd42f086c4d9b6cf239bbf3cedf7e942be32677693445040e57bc6e8df16a34017b19ba085608de5b998c46cb28c236158d169774766c49829371be9e542599cffee6ceea998652a3f667be0a140d350c86f572a604e4c9d2b8fb3a10bb277aa851db78a59a3ebe9e6488dd3b9277b79bfed966c58c0a975bff3dac7bfd6956998962fb0e4b26ac182fc56207ae24ddc29b437cd61e14e9c80909021ea528590d9682b583baea17b3eb746ce9dae8d2472923599f61b898766a8bcb54bf6d889a461a2155439a4a0672275b3efd7a9c3be7a14ea6db67e2f422a8aa815534ac322d1cfbb7d56a08cd99d93aaa7393c6bf0de87f5721a88395d7c003fdf935907b5f29c9fd2fd03d5fe6d7b85520f9d0011010001c2c39b0418010a000f021b02050255dda26b050905115910024009104e2c6e8793298290c15d200419010a00060502548eb056000a09102e1ac68ed40814e092a3100097ad4a093388ac905fed44273aedb97f416572e110d095585c09f9d4027b88afbe9fdc48ee62aac3e9cf1069c6d31738204f0b6d617c74f4c7f7037f3c4ff8d91d5ffd1e43c6ddcc69829366abf622421c4256f76f1e8fc81a4a52f5432de1fee1163b0bedd956d79ef2b3c390f1c811490d00fc511e32fcc4eae9e2edc619e257cb92b4bcf7aa3495aca2fee0a0ec1291873e386bd9585a943e77b0450beae630493b9e15a051e2e36fea0bdb632c56e9db444e1c944298bf24fadc1e229ad9b326c7468903caffec7309cc18aad44e23dafb74e8d21ca239534b353ff3ef5db662a73ca1345c533cbf1f3915bc0c9496e9d85dd3807e8a9cf864c10c932c0d39653cc3a11ebd5b6cec393932fb9ab8f66c48d4892f2559981f4b9635cd6d804c1ac5c2e5ed4cd3d46fa395d574a8fc3e06c9f62a4259b71fbb51814623dffdcac41f93974815a7cd096df8dcee2ffeba91036e5822a743f2bbbf6e7c425787618e7f13b4a7e314623136b94dcfa7998986072574c0d8c1991c575a9b59e036387299754df0e5ee2584ae2a9cf993a64355228b986437a4af9bc6b8bbe39283cf19967ac3110b5045183675d2a71ade3b5aa11b93af49ff575656e4d76ea75f1aa527b96ef067414a94c39a903422a602d77328a00bf0e301419077d46f30aa1103eb602493f4af9ac309d8be098714ca345fc2e0ea532701373d47f3f95324162104ef6e286dda85ea2a4ba7de684e2c6e879329829052810ffa02fd7b16893f6a36dfc6204279a65b96cbef1f33fb55c31d6bf81e0bfde7e956592b9471a6355a6fe39e878dc766f2d7b893ffb4b20f82cc67f88878e3a0ced409d066c74204f61cbedc9836006f62fc85836e16076c6bb2031250d7f16dd7143203370bc096fecc485543057543af2f1922886db6653700ca154509fef5906461e0db067949474c621f0eacab93fe9bec88bf3af06b8fbc2f8cf4dba9a16990e60faaa2e4bfa3edc90ea7f9b17b6eec00c3c3d31d56bf13c6363a8c19072a534d0af08683e98f0936d998c29c1fc8ca9d3609d9f1ae065028c09e7c2cddae824a90c110162d0f420d83d1ed81079cc61e93b38c82b3e7741df484d1700c38c261478d1f29bebd5485d2696e12849f877b256e627946834f947dd73ce9efb777e394e053a021b512140faa40ba478e5e056b1b6755116cdc48a32b809b909001aca17489fe82ac3c41dd3756d9aa01b8026af7948dd4f85d20ce441d91646fdc15f7f15009b1f131470a9d5038a54f831ddfb4696532133171a2ca3578420694cbee3a5b73f652326420d2e0412c81390f6113c89f73d128101f529423d94ee43fe19f677b767db36f4723755a2a9e04ac1825c4891a8b067bf74d54ba04702a7d289ce4d2f73e514fe3e406997bb14f410ae5c8afae5786426e52a734ea43d8b2d4e83024eaa1de2e5cc57e113dcb076aa819ac7958da8c6f0a77046fc4630cc2c3950418010a00090502548eb056021b02024009104e2c6e8793298290c15d200419010a00060502548eb056000a09102e1ac68ed40814e092a3100097ad4a093388ac905fed44273aedb97f416572e110d095585c09f9d4027b88afbe9fdc48ee62aac3e9cf1069c6d31738204f0b6d617c74f4c7f7037f3c4ff8d91d5ffd1e43c6ddcc69829366abf622421c4256f76f1e8fc81a4a52f5432de1fee1163b0bedd956d79ef2b3c390f1c811490d00fc511e32fcc4eae9e2edc619e257cb92b4bcf7aa3495aca2fee0a0ec1291873e386bd9585a943e77b0450beae630493b9e15a051e2e36fea0bdb632c56e9db444e1c944298bf24fadc1e229ad9b326c7468903caffec7309cc18aad44e23dafb74e8d21ca239534b353ff3ef5db662a73ca1345c533cbf1f3915bc0c9496e9d85dd3807e8a9cf864c10c932c0d39653cc3a11ebd5b6cec393932fb9ab8f66c48d4892f2559981f4b9635cd6d804c1ac5c2e5ed4cd3d46fa395d574a8fc3e06c9f62a4259b71fbb51814623dffdcac41f93974815a7cd096df8dcee2ffeba91036e5822a743f2bbbf6e7c425787618e7f13b4a7e314623136b94dcfa7998986072574c0d8c1991c575a9b59e036387299754df0e5ee2584ae2a9cf993a64355228b986437a4af9bc6b8bbe39283cf19967ac3110b5045183675d2a71ade3b5aa11b93af49ff575656e4d76ea75f1aa527b96ef067414a94c39a903422a602d77328a00bf0e301419077d46f30aa1103eb602493f4af9ac309d8be098714ca345fc2e0ea532701373d47f3f95324162104ef6e286dda85ea2a4ba7de684e2c6e87932982904f8d0fff4534e6b139122c0b9c20d0d78bfeca70543b5ed453449f0077fc346011a4062a4f0af619ee76d6a1f60934be37374374cbe3a73afd8a8defa23f0d3e00c6a69dd6f010d173463b666f9010c2ccc2ee1a1846a254b9a1a400436127a74d0fb26f19c83d3f9bb9432bbbec93b9e5805fcbc1145096a984be594d6de7629404febb7f76a69103fc267e37f97d0f014cf3b43fa3f72bdab88799953e77000ac02603e702d3c8a3b55674715aa037c87c6725a0946a4760275b3f37e3137d1b0d77f0ce65112ba6c108e4009c7b586fd47a37f31abac914610eef5490a57cd2e444e486bb77078e6a795e82cbfd80cf1f833702fe844d2ae51a8f452b139caa2a8d8de7f404281e7a7db71945918115aa5c8cd043afddda16d6da10026370d59b40d240cda731c19dd172acb4fb3ed9df6daa3c7e4deb87d4cfd2b55832e5d3a08810de30dcb936901ee65ecbda926a46ec3220b9b241f6916063ca61341bd824e0b457fcea4bbb413dfd88eedbab389b4d47d3c024392f6ba4e0a8e83dfb7e98b5988856393c210dc6d5602e9e3dab7a515e14ccb17d76ff56fec1eea7300a08560dbf3c4737e64d135cff87da1ad6ef34c76cc60036896a50c45e7336df1961f78d944b3ac3b1949c4e62128093c0989f8f9a77fb4a8a854dba1f26b7411f2cd4a32252a4889482679c9dfba8bf42628086c86f4c731cbee5c2c8465cd0e057773ccec14d04548eaffb011000caa3384a4ff73575b1ee21fe07de48a076ae95b2f34694328941a91b4c9b8c2b15517389eee23d8c52181ac25cef3505a25047f9082e57fc1a94e7074bd726e1845771b1782408b785a718a6d5df8521fd2f06ff57741f99e43bf8c3bd027a6c38a8cd87897c9a2a5b7013273453b64df30f8f5a6a79e8cfbdc83818c169fcbe2ec6b5b004ba0685f5cd23be598ae42d25e972942ccafe0acb5845d3320b503aca17b76af5aeeee5105e6c0f2d48f79b0cf2652614d2c4fd2b0d8b989fb03952594a0c487c616ff42440cebc65e08667db6b3c158a27c54ffd0f2eef776441d84f73471fe19dff64b2f4e17206bd6c257d8c46b4d2b2d5d4c4c8da2aac2dda3f84e8453180c5fe44f49526a4724d513ac9d484898ca9b5c75db4179aa4c4adb95665b1d2ba9771fa23363ae15086785c325d8d471d43342a99359e21e6f3bfdb27c66639098a0d5b00a658f4907a16b5fdf188356d2d55893304d54df202641ec5a397eb8e6896eabf6451b8089b76ba2cdb7bf5ebfa1fbb936d18fe0a0c3b741bdbc8ff833adca14566204b6db414050546f8cbcfd47443cac35f72585c8c26d0512830056fa7f04f1ffad0319a5ffb88fe68766edd670b21f5b8e4e93bbbc0bde2f146732f4d9355798e7d49b856bf283df8bc495790ce1a160dfeb3302644a20c52b128066d659b01bb9cd3a14899ff4e18b010d856a1010c977ab56dd4170011010001c2c39b0418010a000f021b02050255dda1bb0509051158b0024009104e2c6e8793298290c15d200419010a00060502548eaffb000a09107017adcef65c2036c9ea1000c5b8ae50975080b7402f3d2f37c949043871e3c61da92bce9f600c0038faf844ef0b7a15869d55e2f882238050ca3b97b86d00bf6b15e6e7b738a99e08510f9e21c0dfeb3b8edd249ae8670c8a575fc907174c15b6b088e283f22649d4cfb0bb0ec96c22a6bab57cf0b20116295f335ae138afe2b4f2a4fd1837384f4a78eb26d00499c066fd7d251f7f5c9ff3cdc1a87206e8c69ee2539f061c08ccd724c3fe0e78f6e47be798f7f2c04764612945404fe3b732c85fda5c4ac745719bae819425c987a63e74d9462593271d4b77a9c519ee6418fd1b6a309df006c96708e6b4860785c16e374cab79ad330ccc2b7956811facf5a224ad7a3b3cd42b2b0b7735be4623f95679208f18357c4cc429eff1afaf3e441668bb746b2ce0be997911aca284b99d303819a414788697bcd25ceff814551aa4d7f3783af8b27f3259301b40f33ff9edf8314ce46942ae29c1d6c6372615f38c7e60e4d6fb5c9eeb97399de068e7f5be219d236ba571dac862c7411f5f3a18617d16d2b061d42cc3188868e5e73820304dfac3f25ced5690c819605a354f78d1c75938eaa95cf08735f826f23647fe666b3b6514aa5386696f1e84520c8481339341d91c23b40c2559f445dfd9d7efd7aac7a4b3b40ff7faf7730d2c515861239380feda058c31adb2749cbd20ca6c42beccd6cdddfd8df73a66155e3a7dc9cb82d860ab320304f79945c6162104ef6e286dda85ea2a4ba7de684e2c6e879329829069491000a98851bf6424024443546f80aa05239c8e44a586111973d9339bbcf1a6dd94b550787dab587f8b0cbffc322b277e6256bfc062d6281c8745bc9f10d476d8c88e719c68ba55c08a380d95fbe932e7aff8f63b5207bd20e23dd108160485b0f03908c08e5129adeeb5a6937c18c4c1920610567d980d8e3eb57b9678f96b5276c63c04b98b7574a8dedbabe66b31b75fbc03f393bdc03fcb2f3807a70ebcfc009042e49720b8fc0c06b914ee720ebcb4803deb40c8cc9208178e9d27582d77be985a89c51e8231361457ff0772fbb09ad27ca195722ebcec8e2ffefe2b75574bf954745400e815f4bbb58e174d3ce86b3b0cb00b174f46aa6bb5c38e2eeb708fcd51467cee1f34239ff2f14a2d4a1f703a642bb405bd7eb7553017c5436492afb428a729c93895433b66bf608f99052ef46fd6d4d7b12c36b12306ca43e153f9d49528d192513deb0e00eff5bc9c7783d0873f44e2db86f934712e2cc5aa3ce7ec0ce4f9f4f4bdb926440fbcdc39b2bf2c75f0b8e911bd695a84bc98b547bf899f37338ae0db807d45b14ff5af477cfb697cef8715a536b7cb60e4a9e17b2cbcf141a544b9a8d079c9488a44977888c4fda2e186ed790d954ab2c9f27d6847dd0a2ab4c81f1da886fd685d0e531f868bdc12b56a8d6e85e7d64e8eea94ab4df384b7fb8a4200255519fba3b4e74477c58ce928b3d33617401161a19c475409c90bc2c3950418010a00090502548eaffb021b02024009104e2c6e8793298290c15d200419010a00060502548eaffb000a09107017adcef65c2036c9ea1000c5b8ae50975080b7402f3d2f37c949043871e3c61da92bce9f600c0038faf844ef0b7a15869d55e2f882238050ca3b97b86d00bf6b15e6e7b738a99e08510f9e21c0dfeb3b8edd249ae8670c8a575fc907174c15b6b088e283f22649d4cfb0bb0ec96c22a6bab57cf0b20116295f335ae138afe2b4f2a4fd1837384f4a78eb26d00499c066fd7d251f7f5c9ff3cdc1a87206e8c69ee2539f061c08ccd724c3fe0e78f6e47be798f7f2c04764612945404fe3b732c85fda5c4ac745719bae819425c987a63e74d9462593271d4b77a9c519ee6418fd1b6a309df006c96708e6b4860785c16e374cab79ad330ccc2b7956811facf5a224ad7a3b3cd42b2b0b7735be4623f95679208f18357c4cc429eff1afaf3e441668bb746b2ce0be997911aca284b99d303819a414788697bcd25ceff814551aa4d7f3783af8b27f3259301b40f33ff9edf8314ce46942ae29c1d6c6372615f38c7e60e4d6fb5c9eeb97399de068e7f5be219d236ba571dac862c7411f5f3a18617d16d2b061d42cc3188868e5e73820304dfac3f25ced5690c819605a354f78d1c75938eaa95cf08735f826f23647fe666b3b6514aa5386696f1e84520c8481339341d91c23b40c2559f445dfd9d7efd7aac7a4b3b40ff7faf7730d2c515861239380feda058c31adb2749cbd20ca6c42beccd6cdddfd8df73a66155e3a7dc9cb82d860ab320304f79945c6162104ef6e286dda85ea2a4ba7de684e2c6e879329829055dc0ffe22bf3c7958e18732199f572d638d2ad791fcb827ce351c69324c12c1e2f0fe8a2f4bb4cd26162bf2fba55525570d68c75019e9792e64ae6c01627c78d422a5eb11ace3dcdd8f304e179e8e578dc6d0044829ed848bb66318d8918c23253317c0fbd20da467f43cfa698e2cc3bcd338e239d454c88bea1568c84bf8028086504746cac63864ed878033da177399b0b2373adfcd75c6df010b7e024f69b54ba6dc050897dbad9fca3a306fdf46346843e35b6c3e774a7868a5d9a4de3222f97e9742ed1750ddf490e3dc5963e3b95e846a418cc8f14e081d2f370b9e5365477dacc659f39888356051402d3a88402a29ed62466f1d1eea26783e348ff5f25ac61377eeec99ffb2a6c3b612142389e5ff207e5fddeb9e2775810c52d4195fea78c24e2a74175991b1a0c4b7dbcd53ecac0412e89baa1f811cae06365f32d471f1a9222654cd89972f7a7e410b810541f0e1191b358eb6ebeccb83a23caeadfada6047f13e694d816c8de6a5f118961b25304e7e6e0240aff9670505f80011e14ff31d0dda23a915cfd9810480a8f3d0baf8a12a1012334604073461e50ef3063ddcd7cee1b924d5567df0be24c580ff2682ebb48a5d723c3bcf97c0a7b91405ac2daf68770385ca465e5788a4b81dab026c3c0e36146b732269c18b16d28e94e56f048731323454d5e368b58713b83665be36bf724259cbc5f1699b28d1c0595097cec14d04548eb0ea011000e49dabf3744fc75bf0f4eeb5f901455b64755a6f86e9a42966e30683780b003c05565201f76034213be2dc8ffa4ecf6bcd3679005413a7f48f8ac3f04ee88463bad6fa3764b20830f18240e2edbce4e134a53c6419c23dd51b93a9ac6cf9a77e1f4a873df7cc6923a33cebdee2e44432aa8300aedb6b20c4c31af92cecdb20697a369be264918253601209b5b0bc68214057d83cee57a8e1e3e2778c20923925034a5f0717710b68179b368d957a019dbcea9338a3cb669fbc77fffc7b38bf5badb0521c4996d26c14f44ac37ac5908786812528839a285ff57d57d60ed14b039823b7560cb9b386f272d802b846f16b664f69bc2b460a5a5d480e1aefdae4f0ced6f79eb0226129b02e1efc209ed68e0e963a3e39a7340ffd433aca854a40629e2379200dc6d776b4b14cfa7fc7c0ae27f32c6705c33676a73659e6df6431cdccdcaa086bfedc2ba04e8baa5bdedc8093db4bb22410c0159b6cf280c7b3c77cb7a7b6d50b9d364b1906b272dcc3d1fea9b052834d6ff2188a56d23fee31514310074a6a503ad93e63b8c0a71a31d76dc118eb492a3b31914a3518493eac8a4292e9fe0e4d77365630e0336d20a3d0067831f8e04d8bd5cb4b4b3966c95f3b09387f14dd26598d0062e65efb15ca8380b09a3e2adec71f928a2892fb614ac4edaeb9f06ffa66e898cbd5db588e34b4ba4aac0ac5a1d4ce37d5baf807aa1b56d10011010001c2c1760428010a0009050255dda0ed021d02002109104e2c6e8793298290162104ef6e286dda85ea2a4ba7de684e2c6e879329829095dd10008b324d5b83dd29af741220152faded4e5cf8f8be1a84f14d5d8781e565edff67d94bdec1f24af7b853fb1a71a3ee88e3e3ffbdc7abd35a2160b87c37646a4946459ea0744b81ef9e03197d0175ed30375e264d21cea775e0d8f6dde466b2ca2a780b509b5cd73ef9a60b4c9b7e6ec2c6700876f64d0884ede09d20e9b32ac9ead1db9e74f9963a98094dff1eb924d7e61b75c9dd7a3a58a086cbc85a3a3696adc4ccf41475c0cf36ebaada0896a48d95cb84e2c958c440bdc608c2909d28a0137be01ca034f937c8102668032635d17ecb462cf909926bbd866a3d01f2e3ad986da9119ec6668f9ea6f67904af973b800d9baecbd1b2231e7eb7ce6aece1ecefba726019bcf2ca362e425bc212f9d573495bacfa8f58d7f6e6db2e0666265024c7c9cd9953163dec4a1ebd9a13e9c79119ae4bd7b64c82bba3972eb65b7432e2118c1cf948bac1ea6ed31f9e37fd89be87fbd6c635d218539e31f571e9ef33a4d0eee169913e647c4251d7ae73a1956bb0158de42066845ad588c5a94acf55f26628da5a767e0086c09df2e154f4e37306a4cb6126d0d0d0a822f09388f0b96501cb3c15bab3499300309615d5877700c95f1f8b00d7a29238473cab81cb96fb22f20ac5d3174160a7b2b36247cba3933d38694abcf56f2e60b3bbea1189fd8419505d1a3efeeb9a55e04dff613773b30f0475805928a7deb7101363d6497013c2c3950418010a00090502548eb0ea021b02024009104e2c6e8793298290c15d200419010a00060502548eb0ea000a09102d000988589839a3b6510fff7265924a47db8123f0013e5c1670b78a9a9c16f63e2fefce0dca7bdb7ba72307ec95a483b2c5192a504c81b8fc739f4466a11baf1240d2b23d2f8c53086da90aeb11f3869e65dff934b61754ea295188b05a4d88d4a2e735b8436181961c034ec3c63ac9c002396c463920c307a0aba5040c9613cf75f5b646d8da2147e284abfe176980e788e19dab1d09a024d1a1a4749989d38ff60619305a905ea45a65ebe58cc1ed6803494d0a0fde5e1a315bc053e44c4aeb0d25ce9dbfe0ff7066356d018a4e394f527478fb8355e91fabdabdaa5095ccfc35fc3e0725fa64b22bd58690a4eb0eaff101723cb0d362c23e23feb48a3f070e28f239bcf8e22dfea9eb12a97004b0459503b9362b32e83afbbb2a8400bbfb3066c4c499b7de39c24b21d1e68c910c52380588a9d8f74567958050a66f96ae7e961f9877705ff2e0b69633190fa11deab029d343383162e7cd49ab3e0ff827359ced2f95e5d05912111625eb0f53c4fbc6bf2eb46edbd8bc455d8cd946ae634b2afad963cc6cb1f39514c8773b0174db019c92e0a393c26c7c08431197789a0759df984c7b4c391045dee0a90bf0201ca8a8539e758a9731d5ef1a172a6c90cc596511e595339bc0a7b178ef1cd9f4f557d1af427127e7bda5d10a58f73cf776e07cdecf34ae91e797a363468c046cfbaa04aa4b231c376bb5a8df5f6a4500d83859bd4d7aced020d9f0c6162104ef6e286dda85ea2a4ba7de684e2c6e87932982903bfb0ffc0d28bc2920d1371acc6e1304d51fc2712368050ad03a819224b741856f504848cc3feea101391e9db1a6ad5c65d66202cc7baa5e0afe256f760db3f047ccfa03593948ef15d7139eb17ef382ddaccb946f7cd65ef669a269ad02c5e63a606d0d6aa176f8e039befa475e1defc0639c378f35ad32dd285e25421cefa73747958513630b5fdcc23000e25dcec641fa3189a61461e974be993001b408a05c500ff74d6c45f88bfb8d59a359d0b66eec8c15611d510848e6c564b4dd5f0bd39f9b9fc3edeb998e57e67f00d902b557d8f8cb40d8164d4fe1d5bd3a86a7594fe42d1caa3c3b0f8ebf04cb451e67212eaf81d705d16e732d459f6fc4b5415361668f3aac95974fc894a4e57c6634e7aea5fe7e3c9303b1fcfe0f1c856bdfab44e971cf441d5deae8ba7e9ce39b61600bba1d8e76b6803f4884701e2df8c6d70bd75c770509e64775fd41d2789c8afc580066f435cf080a5f3d58c7caa7efcb3330f4f00973cf6e8c7e6825bfacc9c762746fca6e304b5388ce044ab0d5accc5ec226d9e1c23d7b583ce965c63e5219d00a6270596bebd6d320fcc860d998c16a9a6f6b6a9b4310551a4d0d630891627faf74d398d37e16abfcdbb168eea47cce33d58bc0f2a0a985cdf8326b666813ba1de5b1a0ee570ced487310f7f065432a29a6b096b9f3ab2d6c18b262d10644ad4847a37b54f6c1d8a80b5410dbece0b0bb7441";

contract PgpTest is Test {
    using PgpParser for Pgp.Parser;

    function setUp() public {}

    function assertEq(PgpOid a, PgpOid b) internal {
        return assertEq(PgpOid.unwrap(a), PgpOid.unwrap(b));
    }

    function assertEq(PgpPacketTag a, PgpPacketTag b) internal {
        return assertEq(PgpPacketTag.unwrap(a), PgpPacketTag.unwrap(b));
    }

    function assertEq(PgpSigSubpacketTag a, PgpSigSubpacketTag b) internal {
        return
            assertEq(PgpSigSubpacketTag.unwrap(a), PgpSigSubpacketTag.unwrap(b));
    }

    function assertEq(PgpSubpacketsOffset a, uint256 b) internal {
        return assertEq(PgpSubpacketsOffset.unwrap(a), b);
    }

    function assertEq(uint256 a, PgpSubpacketsOffset b) internal {
        return assertEq(a, PgpSubpacketsOffset.unwrap(b));
    }

    function assertEq(PgpSubpacketOffset a, uint256 b) internal {
        return assertEq(PgpSubpacketOffset.unwrap(a), b);
    }

    function assertEq(uint256 a, PgpSubpacketOffset b) internal {
        return assertEq(a, PgpSubpacketOffset.unwrap(b));
    }

    function assertEq(PgpPacketOffset a, uint256 b) internal {
        return assertEq(PgpPacketOffset.unwrap(a), b);
    }

    function assertEq(uint256 a, PgpPacketOffset b) internal {
        return assertEq(a, PgpPacketOffset.unwrap(b));
    }

    function testReadHeaderOneOctet() public {
        Pgp.Parser memory parser = Pgp.Parser({raw: hex"C664", offset: 0});
        (PgpPacketTag tag, PgpPacketOffset end) = parser.readPacket();
        assertEq(PgpPacketTags.PUBLIC_KEY, tag);
        assertEq(100 + 2, end);
    }

    function testReadHeaderTwoOctets() public {
        Pgp.Parser memory parser = Pgp.Parser({raw: hex"C6C5FB", offset: 0});
        (PgpPacketTag tag, PgpPacketOffset end) = parser.readPacket();
        assertEq(PgpPacketTags.PUBLIC_KEY, tag);
        assertEq(1723 + 3, end);
    }

    function testReadHeaderFiveOctets() public {
        Pgp.Parser memory parser =
            Pgp.Parser({raw: hex"C6FF000186A0", offset: 0});
        (PgpPacketTag tag, PgpPacketOffset end) = parser.readPacket();
        assertEq(PgpPacketTags.PUBLIC_KEY, tag);
        assertEq(100000 + 6, end);
    }

    function testReadHeaders() public {
        Pgp.Parser memory parser = Pgp.Parser({raw: TOR, offset: 0});

        PgpPacketTag[23] memory tags = [
            PgpPacketTags.PUBLIC_KEY,
            PgpPacketTags.USER_ID,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.PUBLIC_SUBKEY,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.PUBLIC_SUBKEY,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.PUBLIC_SUBKEY,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.PUBLIC_SUBKEY,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.PUBLIC_SUBKEY,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.PUBLIC_SUBKEY,
            PgpPacketTags.SIGNATURE,
            PgpPacketTags.SIGNATURE
        ];
        uint256 tagOffset = 0;

        while (parser.hasPackets()) {
            (PgpPacketTag tag, PgpPacketOffset end) = parser.readPacket();

            PgpPacketTag expected = tags[tagOffset++];
            assertEq(expected, tag);

            parser.skipTo(end);
        }
    }

    function testReadPacketPublicKey() public {
        Pgp.Parser memory parser = Pgp.Parser({raw: TOR, offset: 0});
        (PgpPacketTag tag, PgpPacketOffset end) = parser.readPacket();
        (uint256 created, uint256 algorithm) = parser.readPacketPublicKey(end);

        assertEq(PgpPacketTags.PUBLIC_KEY, tag);
        assertEq(1418637242, created);
        assertEq(1, algorithm);
    }

    function testReadPacketUserId() public {
        Pgp.Parser memory parser = Pgp.Parser({raw: TOR, offset: 528});
        (PgpPacketTag tag, PgpPacketOffset end) = parser.readPacket();
        string memory userId = parser.readPacketUserId(end);

        assertEq(PgpPacketTags.USER_ID, tag);
        assertEq(
            "Tor Browser Developers (signing key) <torbrowser@torproject.org>",
            userId
        );
    }

    function testReadPgpOid() public {
        Pgp.Parser memory parser = Pgp.Parser({raw: SECP256K1, offset: 8});
        PgpOid oid = parser.readOid(PgpPacketOffset.wrap(SECP256K1.length - 8));
        assertEq(PgpOids.SECP256K1, oid);
        assertEq(14, parser.offset);
    }

    function testReadKeyEcdsaSecp256k1() public {
        Pgp.Parser memory parser = Pgp.Parser({raw: SECP256K1, offset: 14});
        PgpPacketOffset end = PgpPacketOffset.wrap(SECP256K1.length - 14);
        bytes memory key = parser.readKeyEcdsaSecp256k1(end);
        assertEq(
            hex"04"
            hex"a45fff31ce17d794419cf9996a25d5bd0d11592844a508725d1839af76874c"
            hex"ab79195af8b00b92427ff3aab326ff7c5ee6f48f20a490db56abb5feead821"
            hex"fdc1",
            key
        );
        assertEq(65 + 14 + 2, parser.offset);
    }

    function testVerifyCertificate() public {
        Pgp.Parser memory parser = Pgp.Parser({raw: SECP256K1, offset: 0});

        {
            // Read the first packet header.
            (PgpPacketTag tag0, PgpPacketOffset end0) = parser.readPacket();
            assertEq(PgpPacketTags.PUBLIC_KEY, tag0);
            assertEq(79 + 1 + 1, end0);

            // Extract key material from the first packet.
            (uint256 created0, uint256 algo0) = parser.readPacketPublicKey(end0);
            assertEq(0x645ac76d, created0);
            assertEq(0x13, algo0);

            PgpOid oid0 = parser.readOid(end0);
            assertEq(PgpOids.SECP256K1, oid0);

            bytes memory key0 = parser.readKeyEcdsaSecp256k1(end0);
            assertEq(
                hex"04"
                hex"a45fff31ce17d794419cf9996a25d5bd0d11592844a508725d1839af"
                hex"76874cab79195af8b00b92427ff3aab326ff7c5ee6f48f20a490db56"
                hex"abb5feead821fdc1",
                key0
            );

            // End of first packet.
            assertEq(end0, parser.offset);
        }

        {
            // Read the second packet header.
            (PgpPacketTag tag1, PgpPacketOffset end1) = parser.readPacket();
            assertEq(PgpPacketTags.USER_ID, tag1);
            assertEq((79 + 1 + 1) + (61 + 1 + 1), end1);

            // Extract the User ID from the second packet.
            string memory userId = parser.readPacketUserId(end1);
            assertEq(
                "Foo Bar <0x00D3BAf1080b1Cfb5897225a21EcdcC25a1F4456@ethereum>",
                userId
            );

            // End of the second packet.
            assertEq(end1, parser.offset);
        }

        {
            // Read the third packet header.
            (PgpPacketTag tag2, PgpPacketOffset end2) = parser.readPacket();
            assertEq(PgpPacketTags.SIGNATURE, tag2);
            assertEq((79 + 1 + 1) + (61 + 1 + 1) + (150 + 1 + 1), end2);

            (uint256 sigType, uint256 pkAlgo, uint256 hashAlgo) =
                parser.readPacketSignature(end2);

            assertEq(0x13, sigType);
            assertEq(0x13, pkAlgo);
            assertEq(0x08, hashAlgo);

            // Read hashed subpackets.
            PgpSubpacketsOffset subsEnd = parser.readSignatureV4Subpackets(end2);
            assertEq(parser.offset + 62, subsEnd);

            // Read the first subpacket.
            (PgpSigSubpacketTag subTag, PgpSubpacketOffset subEnd) =
                parser.readSignatureV4Subpacket(subsEnd);

            assertEq(PgpSigSubpacketTags.ISSUER_FINGERPRINT, subTag);
            assertEq(parser.offset + 21, subEnd);

            bytes memory fingerprint = parser.readSignatureV4Fingerprint(subEnd);
            assertEq(hex"f5d6432b0c895de229a70b6746888275248b5d7a", fingerprint);

            // Read the second subpacket.
            (subTag, subEnd) = parser.readSignatureV4Subpacket(subsEnd);

            assertEq(PgpSigSubpacketTags.SIGNATURE_CREATION_TIME, subTag);
            assertEq(parser.offset + 4, subEnd);

            parser.skipTo(subEnd);

            // Read the rest of the hashed subpackets.
            while (parser.hasSubpackets(subsEnd)) {
                // TODO: Actually validate the remaining packets.
                (subTag, subEnd) = parser.readSignatureV4Subpacket(subsEnd);
                parser.skipTo(subEnd);
            }

            // Read unhashed subpackets.
            subsEnd = parser.readSignatureV4Subpackets(end2);
            assertEq(parser.offset + 10, subsEnd);

            // Read the unhashed subpackets.
            while (parser.hasSubpackets(subsEnd)) {
                // TODO: Actually validate the remaining packets.
                (subTag, subEnd) = parser.readSignatureV4Subpacket(subsEnd);
                parser.skipTo(subEnd);
            }

            // Read the hash prefix.
            bytes2 hashPrefix = parser.readPacketSignatureTail(end2);
            assertEq(hex"7b38", hashPrefix);

            // Read the ECDSA signature.
            (bytes32 r, bytes32 s) = parser.readSignatureEcdsaSecp256k1(end2);
            assertEq(
                hex"2dcf3f3f639edf8ad95b8bf83df5c335a818a213f0695700c9d9b7fe3b9ae2fd",
                r
            );
            assertEq(
                hex"5d20b7465477b9a3450286733f567f7607d3ab27f5d1858ca2820c3f64960fa1",
                s
            );

            // End of the third packet.
            assertEq(end2, parser.offset);
        }

        {
            // Read the fourth packet header.
            (PgpPacketTag tag, PgpPacketOffset end) = parser.readPacket();
            assertEq(PgpPacketTags.PUBLIC_SUBKEY, tag);
            assertEq(
                (79 + 1 + 1) + (61 + 1 + 1) + (150 + 1 + 1) + (83 + 1 + 1), end
            );

            // Extract key material from the fourth packet.
            (uint256 created, uint256 algo) = parser.readPacketPublicSubkey(end);
            assertEq(0x645ac76d, created);
            assertEq(0x12, algo);

            PgpOid oid = parser.readOid(end);
            assertEq(PgpOids.SECP256K1, oid);

            (bytes memory key, bytes memory kdf) =
                parser.readKeyEcdhSecp256k1(end);
            assertEq(
                hex"04"
                hex"470c95b94644da2267cc7966a095661ed4fe169fb3fe0165ff440b8a5d"
                hex"43a7d64554a64147683c12d116c2ddfe33c3f8cda8f8f0e5c80bceb1e5"
                hex"44d6944cf138",
                key
            );

            assertEq(hex"010807", kdf);

            // End of the fourth packet.
            assertEq(end, parser.offset);
        }

        {
            // Read the fifth packet header.
            (PgpPacketTag tag, PgpPacketOffset end) = parser.readPacket();
            assertEq(PgpPacketTags.SIGNATURE, tag);
            assertEq(
                (79 + 1 + 1) + (61 + 1 + 1) + (150 + 1 + 1) + (83 + 1 + 1)
                    + (126 + 1 + 1),
                end
            );

            (uint256 sigType, uint256 pkAlgo, uint256 hashAlgo) =
                parser.readPacketSignature(end);

            assertEq(0x18, sigType);
            assertEq(0x13, pkAlgo);
            assertEq(0x08, hashAlgo);

            // Read hashed subpackets.
            PgpSubpacketsOffset subsEnd = parser.readSignatureV4Subpackets(end);
            assertEq(parser.offset + 38, subsEnd);

            // Read the first subpacket.
            (PgpSigSubpacketTag subTag, PgpSubpacketOffset subEnd) =
                parser.readSignatureV4Subpacket(subsEnd);

            assertEq(PgpSigSubpacketTags.ISSUER_FINGERPRINT, subTag);
            assertEq(parser.offset + 21, subEnd);

            bytes memory fingerprint = parser.readSignatureV4Fingerprint(subEnd);
            assertEq(hex"f5d6432b0c895de229a70b6746888275248b5d7a", fingerprint);

            // Read the second subpacket.
            (subTag, subEnd) = parser.readSignatureV4Subpacket(subsEnd);

            assertEq(PgpSigSubpacketTags.SIGNATURE_CREATION_TIME, subTag);
            assertEq(parser.offset + 4, subEnd);

            parser.skipTo(subEnd);

            // Read the third subpacket.
            (subTag, subEnd) = parser.readSignatureV4Subpacket(subsEnd);

            assertEq(PgpSigSubpacketTags.KEY_FLAGS, subTag);
            assertEq(parser.offset + 1, subEnd);

            parser.skipTo(subEnd);

            // Read the fourth subpacket.
            (subTag, subEnd) = parser.readSignatureV4Subpacket(subsEnd);

            assertEq(PgpSigSubpacketTags.KEY_EXPIRATION_TIME, subTag);
            assertEq(parser.offset + 4, subEnd);

            parser.skipTo(subEnd);

            // Read unhashed subpackets.
            subsEnd = parser.readSignatureV4Subpackets(end);
            assertEq(parser.offset + 10, subsEnd);

            // Read the unhashed subpackets.
            while (parser.hasSubpackets(subsEnd)) {
                // TODO: Actually validate the remaining packets.
                (subTag, subEnd) = parser.readSignatureV4Subpacket(subsEnd);
                parser.skipTo(subEnd);
            }

            // Read the hash prefix.
            bytes2 hashPrefix = parser.readPacketSignatureTail(end);
            assertEq(hex"e42f", hashPrefix);

            // Read the ECDSA signature.
            (bytes32 r, bytes32 s) = parser.readSignatureEcdsaSecp256k1(end);
            assertEq(
                hex"8f1140acfbbd636fedba264b9869aebd3335fe180b4d07b1413c9fc372801baf",
                r
            );
            assertEq(
                hex"9fed58af68af2b1293476a2ae1b84c469193312f4db2d358e0bb889b77203783",
                s
            );

            // End of the fifth packet.
            assertEq(end, parser.offset);
        }

        // End of bundle.
        assertEq(SECP256K1.length, parser.offset);
    }
}
